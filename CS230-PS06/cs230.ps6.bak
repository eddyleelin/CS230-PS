(require racket/base)
(require racket/stream)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Part Two
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem 3

(define viterbiProb
  (lambda (emission k switchPr p1 p2)
...))

(viterbiProb '(1 0 1 0) 2 0.45 0.5 0.65)
;=> 0.06875

(define viterbiPath
  (lambda (emission switchPr s1 s2 p1 p2)
...))

(define pathSolve
  (lambda ()
    ))

(viterbiPath '(1 0 1) 0.45 'Fair 'Biased 0.5 0.55)
;=> ((Fair Fair Fair) 0.018906250000000003)
(viterbiPath '(1 1 0 0 1) 0.45 'Fair 'Biased 0.5 0.65)
;=> ((Fair Fair Biased Biased Fair) 0.0016175478515625004)